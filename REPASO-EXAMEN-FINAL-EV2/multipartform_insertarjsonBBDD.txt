@PostMapping("/upload")
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {

        if (file.isEmpty()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("El archivo está vacío");
        }

        if (file.getSize() > 5 * 1024 * 1024) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("El archivo es demasiado grande");
        }

        String fileName = file.getOriginalFilename();
        if (fileName != null && !fileName.endsWith(".txt")) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Solo se permiten archivos .txt");
        }

        try {
            String uploadDirPath = System.getProperty("user.home") + File.separator + "uploads";
            File uploadDir = new File(uploadDirPath);
            if (!uploadDir.exists()) {
                uploadDir.mkdirs();
            }

            File dest = new File(uploadDir, fileName);
            file.transferTo(dest);
            leerDeFichero(dest);


            return ResponseEntity.status(HttpStatus.OK).body("Archivo subido exitosamente");

        } catch (IOException e) {
            System.out.println(e.getCause());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al guardar el archivo");
        }
    }

    private static void leerDeFichero(File dest) throws IOException {
        try (BufferedReader bf = new BufferedReader(new FileReader(new File(dest.toURI())))){
            String linea = "";
            while ((linea=bf.readLine()) != null){
                System.out.println(linea);
            }
        }
    }